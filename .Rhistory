# Manipulating the image data to to matrix and then threshold, invert + tranpose
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mat <- t(1L - 1L * (im[[1]][1,,] > 180))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# nonogram has a method for plotting a matrix in a standard way
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nonogram::create_matrix_plot(mat)
puzzle        <- create_puzzle_from_matrix(mat)
puzzle_string <- convert_puzzle_to_puzzle_string(puzzle)
create_puzzle_plot(puzzle, show_clues=TRUE)
create_puzzle_plot(puzzle, mat, show_clues=TRUE)
library(magick)
im <- magick::image_read(system.file("img", "genilogo.jpg", package="jpeg"))
im
im <- im %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
im
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Manipulating the image data to to matrix and then threshold, invert + tranpose
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mat <- t(1L - 1L * (im[[1]][1,,] > 180))
mat
mat_df <-data.frame(mat)
library(ggplot2)
hist(mat_df)
# Melt data
df <- data.frame( x = rnorm(20), ya = rnorm(20), yb = rnorm(20), yc = rnorm(20) )
df <- melt(df, id.vars="x", variable.name="class", value.name="y")
library(reshape2)
# Melt data
df <- data.frame( x = rnorm(20), ya = rnorm(20), yb = rnorm(20), yc = rnorm(20) )
df <- melt(df, id.vars="x", variable.name="class", value.name="y")
df <- melt(mat_df, id.vars="x", variable.name="class", value.name="y")
df <- melt(mat_df, id.vars="X1", variable.name="class", value.name="y")
df
# Melt data
df <- melt(mat_df, id.vars="X1", value.name="y")
df
ggplot(df, aes(x = X1, y = y)) +
geom_point()
ggplot(df, aes(x = X1, y = y)) + geom_point()
mat_df
nrow(mat_df)
ncol(mat_df)
print(mad_df[i,j])
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
print(mat_df[i,j])
}
}
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
#print(mat_df[i,j])
if (mat_df[i,j] == 1){
# get position of row and column
print(i)
print(j)
}
}
}
dff <- data.frame(x = NULL, y = NULL)
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
#print(mat_df[i,j])
if (mat_df[i,j] == 1){
# get position of row and column
# print(i)
# print(j)
d <- data.frame(x=i, y=j)
print(d)
dff <- rbind(dff, d)
}
}
}
View(dff)
ggplot(dff, aes(x = X1, y = y)) + geom_point()
ggplot(dff, aes(x = x, y = y)) + geom_point()
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
#print(mat_df[i,j])
if (mat_df[i,j] == 1){
# get position of row and column
# print(i)
# print(j)
d <- data.frame(x=j, y=i)
print(d)
dff <- rbind(dff, d)
}
}
}
ggplot(dff, aes(x = x, y = y)) + geom_point()
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
#print(mat_df[i,j])
if (mat_df[i,j] == 1){
# get position of row and column
# print(i)
# print(j)
d <- data.frame(x=i, y=j)
print(d)
dff <- rbind(dff, d)
}
}
}
ggplot(dff, aes(x = x, y = y)) + geom_point()
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip()
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=j, y=i)
print(d)
dff <- rbind(dff, d)
}
}
}
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip() + scale_x_reverse()
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip() + scale_y_reverse()
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip(90)
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point()
ggplot(dff, aes(x = x, y = y)) + geom_point()
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip()
library(magick)
im <- magick::image_read(system.file("img", "genilogo.jpg", package="jpeg"))
im
im <- im %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
# Image manipulation
mat <- t(1L - 1L * (im[[1]][1,,] > 180))
mat_df <-data.frame(mat)
library(ggplot2)
library(reshape2)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=j, y=i)
#print(d)
dff <<- rbind(dff, d)
}
}
}
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point()
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
#print(d)
dff <<- rbind(dff, d)
}
}
}
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
dff <<- rbind(dff, d)
}
}
}
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip() +  scale_y_reverse()
ggplot(dff, aes(x = x, y = y)) + geom_point() + coord_flip() +  scale_y_reverse() + scale_x_reverse()
ggplot(dff, aes(x = x, y = y)) + geom_point() +   scale_y_reverse() + scale_x_reverse()
ggplot(dff, aes(x = x, y = y)) + geom_point() +   scale_y_reverse() + scale_x_reverse() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point() +   scale_y_reverse() + scale_x_reverse() + coord_flip() + scale_x_reverse()
ggplot(dff, aes(x = x, y = y)) + geom_point() +   scale_y_reverse() + scale_x_reverse() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point() +scale_x_reverse() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point() +scale_x_reverse() + coord_flip()
ggplot(dff, aes(x = x, y = y)) + geom_point() +scale_x_reverse() + coord_flip()
+ theme(panel.background = element_rect(fill = "white", colour = "grey50"))
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() +scale_x_reverse() + coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
library(ggplot2)
library(magick)
im <- magick::image_read(system.file("img", "genilogo.jpg", package="jpeg"))
im <- im %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
# Image manipulation
mat <- t(1L - 1L * (im[[1]][1,,] > 180))
mat_df <-data.frame(mat)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
dff <<- rbind(dff, d)
}
}
}
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() +scale_x_reverse() + coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
rm(ls(all()))
d <- data.frame(x=i, y=j)
rm(d,dff,g,mat,mat_df,i,j,im)
library(ggplot2)
library(magick)
im <- magick::image_read(system.file("img", "genilogo.jpg", package="jpeg"))
im <- im %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
# Image manipulation
mat <- t(1L - 1L * (im[[1]][1,,] > 180))
mat_df <-data.frame(mat)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
dff <<- rbind(dff, d)
}
}
}
#draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter()
+ scale_x_reverse() + coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
#draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter()
+ scale_x_reverse() #+ coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
#draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() #+ coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
#draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point(position = jitter, color = "red", aes(am + 0.2, vs + 0.2)))  + scale_x_reverse() +  coord_flip()
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point(position = jitter, color = "red", aes(am + 0.2, vs + 0.2))  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point(position = jitter, color = "red", aes(am + 0.2, vs + 0.2))  + scale_x_reverse() +  coord_flip()
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point(position = jitter) + geom_point(position = jitter, color = "red", aes(am + 0.2, vs + 0.2))  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point(position = jitter)  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter without jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
#draw scatter with jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey50"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "blue"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grez"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grez"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
# draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#draw scatter with jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
im <- magick::image_read(system.file("img", "images/amazonLogo.jpg", package="jpeg"))
library(ggplot2)
library(magick)
im <- magick::image_read(system.file("img", "image/amazonLogo.jpg", package="jpeg"))
im <- magick::image_read(system.file("img", "/image/amazonLogo.jpg", package="jpeg"))
im <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions")
img <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
img <- im %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
img <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
img <- img %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
img <- img %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
library(magick)
library(ggplot2)
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
im <- magick::image_read("img", "/image/amazonLogo.jpg", package="jpeg")
img <- magick::image_read("img", "image/amazonLogo.jpg", package="jpeg")
img <- magick::image_read("img", "Users/tomazkastrun/Documents/GitHub/Useless_R_functions/image/amazonLogo.jpg", package="jpeg")
img <- magick::image_read("img", "/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/image/amazonLogo.jpg", package="jpeg")
img <- magick::image_read("img", "~/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/image/amazonLogo.jpg", package="jpeg")
img <- magick::image_read("img", "~/Documents/GitHub/Useless_R_functions/image/amazonLogo.jpg", package="jpeg")
img <- magick::image_read("img", "~/image/amazonLogo.jpg", package="jpeg")
img <- magick::image_read("img", "~/image/amazonLogo.jpg", package="jpeg",  strip = TRUE)
img <- magick::image_read("img", "~/image/amazonLogo.jpg",  strip = TRUE)
img <- magick::image_read("img", "~/image/amazonLogo.jpg")
img <- magick::image_read("~/image/amazonLogo.jpg")
img <- magick::image_read("/image/amazonLogo.jpg")
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("image/amazonLogo.jpg")
img <- img %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
# Image manipulation
mat <- t(1L - 1L * (im[[1]][1,,] > 180))
mat_df <-data.frame(mat)
# Image manipulation
mat <- t(1L - 1L * (img[[1]][1,,] > 180))
mat_df <-data.frame(mat)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
dff <<- rbind(dff, d)
}
}
}
# draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#draw scatter with jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
##########################################
#
# Making scatter plot from JPG
# Series:
# Little Useless-useful R functions #9
# Created: November 19, 2020
# Author: Tomaz Kastrun
# Blog: tomaztsql.wordpress.com
# V.1.0
# Changelog: -
# Disclaimer - All functions from this series
# are written for base package; this uses also
# magick and ggplot2
###########################################
library(ggplot2)
library(magick)
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("image/applLogo.jpg")
img <- img %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
# Image manipulation
mat <- t(1L - 1L * (img[[1]][1,,] > 180))
mat_df <-data.frame(mat)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
dff <<- rbind(dff, d)
}
}
}
# draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#draw scatter with jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#Cleanup
rm(d,dff,g,mat,mat_df,i,j,im)
library(ggplot2)
library(magick)
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("image/applLogo.jpg")
##########################################
#
# Making scatter plot from JPG
# Series:
# Little Useless-useful R functions #9
# Created: November 19, 2020
# Author: Tomaz Kastrun
# Blog: tomaztsql.wordpress.com
# V.1.0
# Changelog: -
# Disclaimer - All functions from this series
# are written for base package; this uses also
# magick and ggplot2
###########################################
library(ggplot2)
library(magick)
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("image/appleLogo.jpg")
img <- img %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
# Image manipulation
mat <- t(1L - 1L * (img[[1]][1,,] > 180))
mat_df <-data.frame(mat)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
dff <<- rbind(dff, d)
}
}
}
# draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#draw scatter with jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#Cleanup
rm(d,dff,g,mat,mat_df,i,j,im)
##########################################
#
# Making scatter plot from JPG
# Series:
# Little Useless-useful R functions #9
# Created: November 19, 2020
# Author: Tomaz Kastrun
# Blog: tomaztsql.wordpress.com
# V.1.0
# Changelog: -
# Disclaimer - All functions from this series
# are written for base package; this uses also
# magick and ggplot2
###########################################
library(ggplot2)
library(magick)
setwd("/Users/tomazkastrun/Documents/GitHub/Useless_R_functions/")
img <- magick::image_read("image/nikeLogo.jpg")
img <- img %>%
image_quantize(max=2, colorspace = 'gray', dither=TRUE) %>%
image_scale(geometry = geometry_size_pixels(width=25, height=20, preserve_aspect=FALSE))
# Image manipulation
mat <- t(1L - 1L * (img[[1]][1,,] > 180))
mat_df <-data.frame(mat)
# Melt data
dff <- data.frame(x = NULL, y = NULL)
for (i in 1:nrow(mat_df)) {
for (j in 1:ncol(mat_df)){
if (mat_df[i,j] == 1){
d <- data.frame(x=i, y=j)
dff <<- rbind(dff, d)
}
}
}
# draw scatter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#draw scatter with jitter
g <- ggplot(dff, aes(x = x, y = y)) + geom_point() + geom_jitter() + scale_x_reverse() +  coord_flip()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
# draw scatter with smooth and CI
g <- ggplot(dff, aes(x = x, y = y)) + geom_point()  + scale_x_reverse() +  coord_flip() +  geom_smooth()
g + theme(panel.background = element_rect(fill = "white", colour = "grey"))
#Cleanup
rm(d,dff,g,mat,mat_df,i,j,im)
